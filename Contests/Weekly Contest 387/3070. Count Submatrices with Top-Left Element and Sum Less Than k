class Solution(object):
    def countSubmatrices(self, grid, k):
        """
        :type grid: List[List[int]]
        :type k: int
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        prefix = [[0]*(n+1) for _ in range(m+1)]
        
        # Calculate prefix sum for rows and columns
        for i in range(m):
            for j in range(n):
                prefix[i+1][j+1] = grid[i][j] + prefix[i+1][j] + prefix[i][j+1] - prefix[i][j]
        
        count = 0
        # Iterate over all possible submatrices that include the top-left element
        for i in range(1, m+1):
            for j in range(1, n+1):
                if prefix[i][j] <= k:
                    count += 1
        return count
